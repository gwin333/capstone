{"version":3,"sources":["components/Navbar.js","components/Form.js","components/App.js","serviceWorker.js","reducers/1stReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","id","href","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","exercisedThisDay","notes","handleChange","bind","assertThisInitialized","handleSubmit","event","_event$target","target","name","value","type","checked","setState","defineProperty","preventDefault","selectedDate","props","localStorage","setItem","JSON","stringify","nextProps","console","log","nextState","parse","getItem","onSubmit","placeholder","onChange","Component","dateString","format","Date","App","selectedDay","components_Navbar","entry_default","components_Form","Boolean","window","location","hostname","match","initialState","firstReducer","arguments","length","undefined","store","createStore","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e15414f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-danger\">\n            EXERCISE TRACKER\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n                <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">History.<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">Last Month.<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">This Month.<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">Goal Setter.<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">Log In/Log Out.<span className=\"sr-only\">(current)</span></a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    constructor() {\n        super()\n        this.state = {\n            exercisedThisDay: \"\",\n            notes: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        const { name, value, type, checked } = event.target\n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        var selectedDate = this.props.value\n        localStorage.setItem(selectedDate, JSON.stringify(this.state))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(this.props, nextProps)\n        let nextState = JSON.parse(localStorage.getItem(nextProps.value))\n        if (!nextState) {\n            nextState = {\n                notes: '',\n                exercisedThisDay: ''\n            }\n        }\n\n        this.setState(nextState)\n\n        //get the item from localStorage for that date or for nextProps.value\n        //do some if this that stuff. and if does exist JSON.parse stuff. and do this.setState on \n        //what gets parsed\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        Date: {this.props.value}<br />\n                    </div>\n                    <div className=\"form-group\">\n                        Notes:<br />\n                        <textarea\n                            type=\"text\"\n                            name=\"notes\"\n                            placeholder=\"Any notes about your exercises this day\"\n                            value={this.state.notes}\n                            onChange={this.handleChange}\n                        /></div><br />\n                    <div className=\"form-group\">\n                        Exercised this day?<br />\n                        <label>\n                            <input\n                                type=\"radio\"\n                                name=\"exercisedThisDay\"\n                                value=\"yes\"\n                                checked={this.state.exercisedThisDay === \"yes\"}\n                                onChange={this.handleChange}\n                            /> Yes, I did!\n                </label><br />\n                        <label>\n                            <input\n                                type=\"radio\"\n                                name=\"exercisedThisDay\"\n                                value=\"no\"\n                                checked={this.state.exercisedThisDay === \"no\"}\n                                onChange={this.handleChange}\n                            /> No, I did not\n                </label>\n                    </div>\n                    <input\n                        type=\"submit\"\n                        value=\"Submit\"\n                        className=\"btn btn-danger\"\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport Navbar from './Navbar';\nimport Calendar from 'react-calendar';\nimport Form from './Form';\nimport { format } from 'date-fns';\n\nconst dateString = format(new Date(), 'yyyy-MM-dd')\nconsole.log(dateString)\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      selectedDay: new Date()\n    }\n  }\n\n  onChange = selectedDay => this.setState({ selectedDay })\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Navbar /><br />\n        <h1>Have you been exercising?</h1><br />\n        <div className=\"row\">\n          <div className=\"col\">\n            <Calendar\n              onChange={this.onChange}\n              value={this.state.selectedDay}\n            />\n          </div>\n          <div className=\"col\">\n            <Form\n              value={format(this.state.selectedDay, 'yyyy-MM-dd')}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n\n}\n\nconst firstReducer = (state = initialState, action) => {\n    return state;\n}\n\nexport default firstReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport firstReducer from './reducers/1stReducer';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nconst store = createStore(firstReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}